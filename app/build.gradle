plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 33

    signingConfigs {
        productionConfig {
            keyAlias 'keyAlias'
            keyPassword 'password'
            storeFile file('../upm-prod.keystore')
            storePassword 'password'
        }
        stagingConfig {
            keyAlias 'keyAlias'
            keyPassword 'password'
            storeFile file('../upm-stag.keystore')
            storePassword 'password'
        }
    }

    defaultConfig {
        applicationId "com.upm.ard"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        dataBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    flavorDimensions "app"
    productFlavors {
        def PRODUCTION_APP_ID = "com.upm.ard"
        def PRODUCTION_BASE_API_URL = "\"https://api.ard.com/\""
        def PRODUCTION_VERSION_CODE = 1
        def PRODUCTION_VERSION_NAME = "1.0"

        def STAGING_APP_ID = "com.upm.ard.staging"
        def STAGING_BASE_API_URL = "\"https://staging-api.ard.com/\""
        def STAGING_VERSION_CODE = 1
        def STAGING_VERSION_NAME = "1.0"

        def DEVELOP_APP_ID = "com.upm.ard.dev"
        def DEVELOP_BASE_API_URL = "\"https://api.stackexchange.com/2.3/\""
        def DEVELOP_VERSION_CODE = 1
        def DEVELOP_VERSION_NAME = "1.0"

        production {
            dimension "app"
            signingConfig signingConfigs.productionConfig
            applicationId PRODUCTION_APP_ID
            versionCode PRODUCTION_VERSION_CODE
            versionName PRODUCTION_VERSION_NAME
            buildConfigField "String", "BASE_API_URL", PRODUCTION_BASE_API_URL
            buildConfigField "Boolean", "NEED_SSL", "false"
            resValue "string", "flavor_app_name", "ARD"
        }
        staging {
            dimension "app"
            signingConfig signingConfigs.stagingConfig
            applicationId STAGING_APP_ID
            versionCode STAGING_VERSION_CODE
            versionName STAGING_VERSION_NAME
            buildConfigField "String", "BASE_API_URL", STAGING_BASE_API_URL
            buildConfigField "Boolean", "NEED_SSL", "false"
            resValue "string", "flavor_app_name", "ARD STAG"
        }
        development {
            dimension "app"
            applicationId DEVELOP_APP_ID
            versionCode DEVELOP_VERSION_CODE
            versionName DEVELOP_VERSION_NAME
            buildConfigField "String", "BASE_API_URL", DEVELOP_BASE_API_URL
            resValue "string", "flavor_app_name", "ARD DEV"
        }
    }
    // Allow references to generated code
    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation("androidx.multidex:multidex:2.0.1")

    // Jetpack Compose
    implementation "androidx.compose.ui:ui:1.2.1"
    implementation "androidx.activity:activity-compose:1.5.1"

    // Material Design
    implementation "androidx.compose.material:material:1.2.1"
    // Material design icons
    implementation "androidx.compose.material:material-icons-extended:1.2.1"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling-preview:1.2.1"
    debugImplementation "androidx.compose.ui:ui-tooling:1.2.1"
    // Integration with observables
    implementation("androidx.compose.runtime:runtime-livedata:1.2.1")
    implementation("androidx.compose.runtime:runtime-rxjava2:1.2.1")

    // UI Tests
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.2.1"

    def lifecycle_version = "2.6.0-alpha02"
    def arch_version = "2.1.0"
    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // ViewModel utilities for Compose
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation("androidx.lifecycle:lifecycle-service:$lifecycle_version")
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation("androidx.lifecycle:lifecycle-process:$lifecycle_version")
    // optional - ReactiveStreams support for LiveData
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version")
    // optional - Test helpers for LiveData
    testImplementation("androidx.arch.core:core-testing:$arch_version")
    // optional - Test helpers for Lifecycle runtime
    testImplementation("androidx.lifecycle:lifecycle-runtime-testing:$lifecycle_version")

    def nav_version = "2.5.2"
    // Kotlin
    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")
    // Feature module Support
    implementation("androidx.navigation:navigation-dynamic-features-fragment:$nav_version")
    // Testing Navigation
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")
    // Jetpack Compose Integration
    implementation("androidx.navigation:navigation-compose:$nav_version")

    def paging_version = "3.1.1"
    implementation("androidx.paging:paging-runtime:$paging_version")
    // alternatively - without Android dependencies for tests
    testImplementation("androidx.paging:paging-common:$paging_version")
    // optional - RxJava2 support
    implementation("androidx.paging:paging-rxjava2:$paging_version")
    // optional - RxJava3 support
    implementation("androidx.paging:paging-rxjava3:$paging_version")
    // optional - Guava ListenableFuture support
    implementation("androidx.paging:paging-guava:$paging_version")
    // optional - Jetpack Compose integration
    implementation("androidx.paging:paging-compose:1.0.0-alpha16")

    def room_version = "2.4.3"
    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor("androidx.room:room-compiler:$room_version")
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")
    // Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")

    def work_version = "2.7.1"
    // Kotlin + coroutines
    implementation("androidx.work:work-runtime-ktx:$work_version")
    // optional - RxJava2 support
    implementation("androidx.work:work-rxjava2:$work_version")
    // optional - GCMNetworkManager support
    implementation("androidx.work:work-gcm:$work_version")
    // optional - Test helpers
    androidTestImplementation("androidx.work:work-testing:$work_version")
    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"

    // coroutines
    def coroutines_version = "1.6.4"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version")
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // okhttp
    // define a BOM and its version
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.10.0"))
    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    // retrofit
    def retrofit = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.google.code.gson:gson:2.9.1"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit"

    // hilt
    implementation("com.google.dagger:hilt-android:2.42")
    kapt("com.google.dagger:hilt-android-compiler:2.42")

    // glide
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'

    // accompanist
    implementation ("com.google.accompanist:accompanist-navigation-animation:0.26.2-beta")
    implementation ("com.google.accompanist:accompanist-pager:0.19.0")
}